"use strict";
/*
 * https://projecteuler.net/problem=1
 *
 * If we list all the natural numbers below 10 that are
 * multiples of 3 or 5, we get 3, 5, 6 and 9.
 * The sum of these multiples is 23.
 * Find the sum of all the multiples of 3 or 5 below 1000.
 *
 */
function sumOfMultiples({ below, divisors }) {
    let sum = 0;
    for (let i = 0; i < below; i++) {
        divisors.some((divisor) => {
            if (i % divisor === 0) {
                sum += i;
                return true;
            }
            return false;
        });
    }
    return sum;
}
console.log(sumOfMultiples({ below: 10, divisors: [3, 5] })); // output: 23
console.log(sumOfMultiples({ below: 1000, divisors: [3, 5] })); // output: 233168
/*
 * https://projecteuler.net/problem=2
 *
 * Each new term in the Fibonacci sequence is generated by
 * adding the previous two terms. By starting with 1 and 2,
 * the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence
 * whose values do not exceed four million,
 * find the sum of the even-valued terms.
 *
 */
function fibonacciSum(max) {
    let termOne = 1;
    let termTwo = 2;
    let termThree = 0;
    let sum = 2;
    while (termThree < max) {
        termThree = termOne + termTwo;
        if (termThree % 2 === 0)
            sum += termThree;
        termOne = termTwo;
        termTwo = termThree;
    }
    return sum;
}
console.log(fibonacciSum(4000000)); // output: 4613732
/*
 * https://projecteuler.net/problem=7
 *
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 * What is the 10 001st prime number?
 *
 */
function nthPrime(n) {
    var workingPrime = 2;
    var nth = 1;
    while (nth < n) {
        workingPrime += 1;
        if (workingPrime % 2 !== 0) {
            var divisorFound = false;
            for (var i = 2; i < workingPrime / 2; i++) {
                if (workingPrime % i === 0) {
                    divisorFound = true;
                    break;
                }
            }
            if (!divisorFound) {
                nth += 1;
            }
        }
    }
    return workingPrime;
}
