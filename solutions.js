/*
 * https://projecteuler.net/problem=1
 * 
 * If we list all the natural numbers below 10 that are 
 * multiples of 3 or 5, we get 3, 5, 6 and 9. 
 * The sum of these multiples is 23.
 * Find the sum of all the multiples of 3 or 5 below 1000.
 * 
 */
class Accumulator {
    constructor(max, multiples) {
        this.max = max;
        this.multiples = multiples;
    }

    get sum() {
        let sum = 0;
        for(let i = 0; i < this.max; i++) {
            for(let j = 0; j < this.multiples.length; j++) {
                if(i % this.multiples[j] === 0) {
                    sum += i;
                    break;
                }
            }
        }
        return sum
    }
}
const accumulatorOne = new Accumulator(10, [3,5]);
const accumulatorTwo = new Accumulator(1000, [3,5]);
console.log(accumulatorOne.sum); // output: 23
console.log(accumulatorTwo.sum); // output: 233168

/*******************************************************************/

/*
 * https://projecteuler.net/problem=2
 * 
 * Each new term in the Fibonacci sequence is generated by 
 * adding the previous two terms. By starting with 1 and 2, 
 * the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence 
 * whose values do not exceed four million, 
 * find the sum of the even-valued terms.
 * 
 */
class FibSum {
    constructor(max) {
        this.max = max;
    }

    get sum() {
        let termOne = 1;
        let termTwo = 2;
        let termThree = 0;
        let sum = 2;
        while (termThree < this.max) {
            termThree = termOne + termTwo;
            if (termThree % 2 === 0) sum += termThree;
            termOne = termTwo;
            termTwo = termThree;
        }
        return sum;
    }
}
const fibSum = new FibSum(4000000);
console.log(fibSum.sum) // output: 4613732

/*******************************************************************/

/*
 * https://projecteuler.net/problem=3
 * 
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143 ?
 *
 */
class LargestPrimeFactor {
    constructor(number) {
        this.number = number;
    }

    get largest() {
        let number = this.number;
        let divisor = 2;
        while (number > 1) {
            if (number % divisor === 0) {
                number /= divisor;
                divisor--;
            }
            divisor++
        }
        return divisor;
    }
}

const largestPrimeFactorOne = new LargestPrimeFactor(13195);
const largestPrimeFactorTwo = new LargestPrimeFactor(600851475143);
console.log(largestPrimeFactorOne.largest); // output: 29
console.log(largestPrimeFactorTwo.largest); // output: 6857

/*******************************************************************/

/*
 * https://projecteuler.net/problem=4
 *
 * A palindromic number reads the same both ways. 
 * The largest palindrome made from the product 
 * of two 2-digit numbers is 9009 = 91 × 99.
 * Find the largest palindrome made from the product 
 * of two 3-digit numbers.
 * 
 */
class Palindromer {
    isPalindrome(product) {
        return product.toString() === product.toString().split('').reverse().join('');
    }

    get largest() {
        let max = 0;
        let i = 999;
        while (i > 99) {
            let j = 999;
            while (j >= i) {
                const product = i * j;
                if (this.isPalindrome(product) && product > max) max = product;
                j--;
            }
            i--;
        }
        return max;
    } 
}

const palindromer = new Palindromer();  
console.log(palindromer.largest); // output: 906609

/*******************************************************************/

/*
 * https://projecteuler.net/problem=5
 * 
 * 2520 is the smallest number that can be divided by 
 * each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible 
 * by all of the numbers from 1 to 20?
 * 
 */
class SmallestMultiple {
    constructor(max) {
        this.max = max;
    }

    get value() {
        let match = false;
        let value = this.max;
        while (!match) {
            value ++;
            let counter = this.max;
            while (counter > 0) {
                match = true;
                if (value % counter !== 0) {
                    match = false;
                    break;
                }
                counter--;
            }
        }
        return value;
    }
}
const smallestMultipleTen = new SmallestMultiple(10);
const smallestMultipleTwenty = new SmallestMultiple(20);
console.log(smallestMultipleTen.value); // output: 2520
console.log(smallestMultipleTwenty.value); // output: 232792560

/*******************************************************************/

/*
 * https://projecteuler.net/problem=6
 * 
 * The sum of the squares of the first ten natural numbers is:
 *   1^2 + 2^2 + ... + 10^2 = 385
 * The square of the sum of the first ten natural numbers is:
 *   (1 + 2 + ... + 10)^2 = 55^2 = 3025
 * Hence the difference between the sum of the squares of 
 * the first ten natural numbers and the square of the sum is 
 * 3025 − 385 = 2640.
 * Find the difference between the sum of the squares of the first 
 * one hundred natural numbers and the square of the sum.
 * 
 */
class SquareSumDifferencer {
    constructor(max) {
        this.max = max;
    }

    squareOfSum() {
        let number = this.max;
        let sum = 0;
        while(number > 0) {
            sum += number;
            number--;
        }
        return sum * sum;
    }

    sumOfSquares() {
        let number = this.max;
        let sum = 0;
        while(number > 0) {
            sum += number * number;
            number--;
        }
        return sum;
    }

    get difference() {
        return this.squareOfSum() - this.sumOfSquares();
    }
}

const squareSumDifferencerTen = new SquareSumDifferencer(10);
const squareSumDifferencerHundred = new SquareSumDifferencer(100);
console.log(squareSumDifferencerTen.difference); // output: 2640
console.log(squareSumDifferencerHundred.difference); // output: 25164150

/*******************************************************************/

/*
 * https://projecteuler.net/problem=36
 * 
 * The decimal number, 585 = 1001001001 (binary), 
 * is palindromic in both bases.
 * Find the sum of all numbers, less than one million, 
 * which are palindromic in base 10 and base 2.
 *
 */
class TwoBasePalindromer {
    constructor(max) {
        this.max = max;
    }

    isPalindrome(number, base) {
        return  number.toString(base) === number.toString(base).split('').reverse().join('');
    }

    get sum() {
        let sum = 0;
        let number = this.max;
        while (number > 0) {
            if (this.isPalindrome(number, 10) && this.isPalindrome(number, 2)) sum += number;
            number--;
        }
        return sum;
    }
}

const twoBasePalindromer = new TwoBasePalindromer(1000000);
console.log(twoBasePalindromer.sum); // output: 872187

/*******************************************************************/