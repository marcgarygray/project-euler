/*
 * https://projecteuler.net/problem=1
 * 
 * If we list all the natural numbers below 10 that are 
 * multiples of 3 or 5, we get 3, 5, 6 and 9. 
 * The sum of these multiples is 23.
 * Find the sum of all the multiples of 3 or 5 below 1000.
 * 
 */
class Accumulator {
    constructor(max, multiples) {
        this.max = max
        this.multiples = multiples
    }
    getSum() {
        let sum = 0
        for(let i = 0; i < this.max; i++) {
            for(let j = 0; j < this.multiples.length; j++) {
                if(i%this.multiples[j] === 0) {
                    sum += i
                    break
                }
            }
        }
        return sum
    }
    get sum() {
        return this.getSum()
    }
}
const accumulatorOne = new Accumulator(10, [3,5])
const accumulatorTwo = new Accumulator(1000, [3,5])
console.log(accumulatorOne.sum) // output: 23
console.log(accumulatorTwo.sum) // output: 233168

/*******************************************************************/

/*
 * https://projecteuler.net/problem=2
 * 
 * Each new term in the Fibonacci sequence is generated by 
 * adding the previous two terms. By starting with 1 and 2, 
 * the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence 
 * whose values do not exceed four million, 
 * find the sum of the even-valued terms.
 * 
 */
class FibSum {
    constructor(max) {
        this.max = max
    }
    getSum() {
        let termOne = 1;
        let termTwo = 2;
        let termThree = 0;
        let sum = 2;
        while (termThree < this.max) {
            termThree = termOne + termTwo; // 3
            if (termThree % 2 === 0) sum += termThree;
            termOne = termTwo;
            termTwo = termThree;
        }
        return sum;

    }
    get sum() {
        return this.getSum()
    }
}
const fibSum = new FibSum(4000000)
console.log(fibSum.sum) // output: 4613732

/*******************************************************************/

/*
 * https://projecteuler.net/problem=3
 * 
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143 ?
 *
 */
class LargestPrimeFactor {
    constructor(number) {
        this.number = number;
    }

    get largest() {
        let number = this.number;
        let divisor = 2;
        while (number > 1) {
            if (number % divisor === 0) {
                number /= divisor;
                divisor--;
            }
            divisor++
        }
        return divisor;
    }
}

const largestPrimeFactor = new LargestPrimeFactor(600851475143);
console.log(largestPrimeFactor.largest); // output: 6857

/*******************************************************************/

